/* Builtins macros for RISC-V 'V' Extension for GNU compiler.
	 Copyright (C) 2022-2022 Free Software Foundation, Inc.
	 Contributed by Ju-Zhe Zhong (juzhe.zhong@rivai.ai), RiVAI Technologies
Ltd.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING3.  If not see
<http://www.gnu.org/licenses/>.  */

/* Use "DEF_RVV_TYPE" macro to define RVV datatype builtins.
   1.The first argument is the name exposed to users.
     For example, "vint32m1_t".
   2.The second argument is the length of ABI-name.
     For example, length of "__rvv_int32m1_t" is 15.
   3.The third argument is the ABI-name. For example, "__rvv_int32m1_t".
   4.The fourth argument is associated scalar type which is used in
     "build_vector_type_for_mode". For "vint32m1_t", we use "intSI_type_node" in
     RV64. Otherwise, we use "long_integer_type_node".
   5.The fifth argument is the machine mode of corresponding RVV type used in
     "build_vector_type_for_mode". For "vint32m1_t", we use VNx2SImode when
     TARGET_MIN_VLEN > 32. Otherwise the machine mode is VNx1SImode.  */

#ifndef DEF_RVV_TYPE
#define DEF_RVV_TYPE(USER_NAME, NCHARS, ABI_NAME, SCALAR_TYPE, VECTOR_MODE)
#endif
#ifndef ADJUST_TYPE0
#define ADJUST_TYPE0(USER_NAME, NCHARS, ABI_NAME, SCALAR_TYPE1, SCALAR_TYPE2,  \
		     VECTOR_MODE1, VECTOR_MODE2, REQUIREMENT)                  \
  DEF_RVV_TYPE (USER_NAME, NCHARS, ABI_NAME,                                   \
		REQUIREMENT ? SCALAR_TYPE1 : SCALAR_TYPE2,                     \
		REQUIREMENT ? VECTOR_MODE1 : VECTOR_MODE2)
#endif
#ifndef ADJUST_TYPE1
#define ADJUST_TYPE1(USER_NAME, NCHARS, ABI_NAME, SCALAR_TYPE, VECTOR_MODE1,   \
		     VECTOR_MODE2, REQUIREMENT)                                \
  DEF_RVV_TYPE (USER_NAME, NCHARS, ABI_NAME, SCALAR_TYPE,                      \
		REQUIREMENT ? VECTOR_MODE1 : VECTOR_MODE2)
#endif
#ifndef ADJUST_TYPE2
#define ADJUST_TYPE2(USER_NAME, NCHARS, ABI_NAME, SCALAR_TYPE1, SCALAR_TYPE2,  \
		     VECTOR_MODE1, VECTOR_MODE2, REQUIREMENT1, REQUIREMENT2)   \
  DEF_RVV_TYPE (USER_NAME, NCHARS, ABI_NAME,                                   \
		REQUIREMENT1 ? SCALAR_TYPE1 : NULL_TREE,                       \
		REQUIREMENT1 ? (REQUIREMENT2 ? VECTOR_MODE1 : VECTOR_MODE2)    \
			     : VOIDmode)
#endif
#define TARGET_VECTOR_FP32                                                     \
  (TARGET_HARD_FLOAT && (TARGET_VECTOR_ELEN_FP_32 || TARGET_VECTOR_ELEN_FP_64))
#define TARGET_VECTOR_FP64                                                     \
  (TARGET_DOUBLE_FLOAT && TARGET_VECTOR_ELEN_FP_64 && (TARGET_MIN_VLEN > 32))

/* Set scalar_type to NULL_TREE when the corresponding vector_type is
   disabled. According to rvv-intrinsic and RISC-V 'V' Extension ISA document:
   https://github.com/riscv-non-isa/rvv-intrinsic-doc/blob/master/rvv-intrinsic-rfc.md.
   https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc.

   Data Types
   Encode SEW and LMUL into data types.
   We enforce the constraint LMUL â‰¥ SEW/ELEN in the implementation.
   There are the following data types for MIN_VLEN > 32.

Note: N/A means the corresponding vector type is disabled.

|Types   |LMUL=1|LMUL=2 |LMUL=4 |LMUL=8 |LMUL=1/2|LMUL=1/4|LMUL=1/8|
|int64_t |VNx1DI|VNx2DI |VNx4DI |VNx8DI |N/A     |N/A     |N/A     |
|uint64_t|VNx1DI|VNx2DI |VNx4DI |VNx8DI |N/A     |N/A     |N/A     |
|int32_t |VNx2SI|VNx4SI |VNx8SI |VNx16SI|VNx1SI  |N/A     |N/A     |
|uint32_t|VNx2SI|VNx4SI |VNx8SI |VNx16SI|VNx1SI  |N/A     |N/A     |
|int16_t |VNx4HI|VNx8HI |VNx16HI|VNx32HI|VNx2HI  |VNx1HI  |N/A     |
|uint16_t|VNx4HI|VNx8HI |VNx16HI|VNx32HI|VNx2HI  |VNx1HI  |N/A     |
|int8_t  |VNx8QI|VNx16QI|VNx32QI|VNx64QI|VNx4QI  |VNx2QI  |VNx1QI  |
|uint8_t |VNx8QI|VNx16QI|VNx32QI|VNx64QI|VNx4QI  |VNx2QI  |VNx1QI  |
|float64 |VNx1DF|VNx2DF |VNx4DF |VNx8DF |N/A     |N/A     |N/A     |
|float32 |VNx2SF|VNx4SF |VNx8SF |VNx16SF|VNx1SF  |N/A     |N/A     |
|float16 |VNx4HF|VNx8HF |VNx16HF|VNx32HF|VNx2HF  |VNx1HF  |N/A     |

Mask Types Encode the ratio of SEW/LMUL into the
mask types. There are the following mask types.

n = SEW/LMUL

|Types|n=1    |n=2    |n=4    |n=8   |n=16  |n=32  |n=64  |
|bool |VNx64BI|VNx32BI|VNx16BI|VNx8BI|VNx4BI|VNx2BI|VNx1BI|

There are the following data types for MIN_VLEN = 32.

|Types   |LMUL=1|LMUL=2|LMUL=4 |LMUL=8 |LMUL=1/2|LMUL=1/4|LMUL=1/8|
|int64_t |N/A   |N/A   |N/A    |N/A    |N/A     |N/A     |N/A     |
|uint64_t|N/A   |N/A   |N/A    |N/A    |N/A     |N/A     |N/A     |
|int32_t |VNx1SI|VNx2SI|VNx4SI |VNx8SI |N/A     |N/A     |N/A     |
|uint32_t|VNx1SI|VNx2SI|VNx4SI |VNx8SI |N/A     |N/A     |N/A     |
|int16_t |VNx2HI|VNx4HI|VNx8HI |VNx16HI|VNx1HI  |N/A     |N/A     |
|uint16_t|VNx2HI|VNx4HI|VNx8HI |VNx16HI|VNx1HI  |N/A     |N/A     |
|int8_t  |VNx4QI|VNx8QI|VNx16QI|VNx32QI|VNx2QI  |VNx1QI  |N/A     |
|uint8_t |VNx4QI|VNx8QI|VNx16QI|VNx32QI|VNx2QI  |VNx1QI  |N/A     |
|float64 |N/A   |N/A   |N/A    |N/A    |N/A     |N/A     |N/A     |
|float32 |VNx1SF|VNx2SF|VNx4SF |VNx8SF |N/A     |N/A     |N/A     |
|float16 |VNx2HF|VNx4HF|VNx8HF |VNx16HF|VNx1HF  |N/A     |N/A     |

Mask Types Encode the ratio of SEW/LMUL into the
mask types. There are the following mask types.

n = SEW/LMUL

|Types|n=1    |n=2    |n=4   |n=8   |n=16  |n=32  |n=64|
|bool |VNx32BI|VNx16BI|VNx8BI|VNx4BI|VNx2BI|VNx1BI|N/A |

TODO: FP16 vector needs support of 'zvfh', we don't support it yet.  */

/* SEW/LMUL = 64:
   Only enable when TARGET_MIN_VLEN > 32 and machine mode = VNx1BImode.  */
ADJUST_TYPE0 (vbool64_t, 14, __rvv_bool64_t, boolean_type_node, NULL_TREE,
	      VNx1BImode, VOIDmode, TARGET_MIN_VLEN > 32)
/* SEW/LMUL = 32:
   Machine mode = VNx2BImode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx1BImode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE1 (vbool32_t, 14, __rvv_bool32_t, boolean_type_node, VNx2BImode,
	      VNx1BImode, TARGET_MIN_VLEN > 32)
/* SEW/LMUL = 16:
   Machine mode = VNx2BImode when TARGET_MIN_VLEN = 32.
   Machine mode = VNx4BImode when TARGET_MIN_VLEN > 32.  */
ADJUST_TYPE1 (vbool16_t, 14, __rvv_bool16_t, boolean_type_node, VNx4BImode,
	      VNx2BImode, TARGET_MIN_VLEN > 32)
/* SEW/LMUL = 8:
   Machine mode = VNx8BImode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx4BImode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE1 (vbool8_t, 13, __rvv_bool8_t, boolean_type_node, VNx8BImode,
	      VNx4BImode, TARGET_MIN_VLEN > 32)
/* SEW/LMUL = 4:
   Machine mode = VNx16BImode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx8BImode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE1 (vbool4_t, 13, __rvv_bool4_t, boolean_type_node, VNx16BImode,
	      VNx8BImode, TARGET_MIN_VLEN > 32)
/* SEW/LMUL = 2:
   Machine mode = VNx32BImode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx16BImode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE1 (vbool2_t, 13, __rvv_bool2_t, boolean_type_node, VNx32BImode,
	      VNx16BImode, TARGET_MIN_VLEN > 32)
/* SEW/LMUL = 1:
   Machine mode = VNx64BImode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx32BImode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE1 (vbool1_t, 13, __rvv_bool1_t, boolean_type_node, VNx64BImode,
	      VNx32BImode, TARGET_MIN_VLEN > 32)

/* LMUL = 1/8:
   Only enble when TARGET_MIN_VLEN > 32 and machine mode = VNx1QImode.  */
ADJUST_TYPE0 (vint8mf8_t, 15, __rvv_int8mf8_t, intQI_type_node, NULL_TREE,
	      VNx1QImode, VOIDmode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE0 (vuint8mf8_t, 16, __rvv_uint8mf8_t, unsigned_intQI_type_node,
	      NULL_TREE, VNx1QImode, VOIDmode, TARGET_MIN_VLEN > 32)
/* LMUL = 1/4:
   Machine mode = VNx2QImode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx1QImode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE1 (vint8mf4_t, 15, __rvv_int8mf4_t, intQI_type_node, VNx2QImode,
	      VNx1QImode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE1 (vuint8mf4_t, 16, __rvv_uint8mf4_t, unsigned_intQI_type_node,
	      VNx2QImode, VNx1QImode, TARGET_MIN_VLEN > 32)
/* LMUL = 1/2:
   Machine mode = VNx4QImode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx2QImode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE1 (vint8mf2_t, 15, __rvv_int8mf2_t, intQI_type_node, VNx4QImode,
	      VNx2QImode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE1 (vuint8mf2_t, 16, __rvv_uint8mf2_t, unsigned_intQI_type_node,
	      VNx4QImode, VNx2QImode, TARGET_MIN_VLEN > 32)
/* LMUL = 1:
   Machine mode = VNx8QImode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx4QImode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE1 (vint8m1_t, 14, __rvv_int8m1_t, intQI_type_node, VNx8QImode,
	      VNx4QImode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE1 (vuint8m1_t, 15, __rvv_uint8m1_t, unsigned_intQI_type_node,
	      VNx8QImode, VNx4QImode, TARGET_MIN_VLEN > 32)
/* LMUL = 2:
   Machine mode = VNx16QImode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx8QImode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE1 (vint8m2_t, 14, __rvv_int8m2_t, intQI_type_node, VNx16QImode,
	      VNx8QImode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE1 (vuint8m2_t, 15, __rvv_uint8m2_t, unsigned_intQI_type_node,
	      VNx16QImode, VNx8QImode, TARGET_MIN_VLEN > 32)
/* LMUL = 4:
   Machine mode = VNx32QImode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx16QImode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE1 (vint8m4_t, 14, __rvv_int8m4_t, intQI_type_node, VNx32QImode,
	      VNx16QImode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE1 (vuint8m4_t, 15, __rvv_uint8m4_t, unsigned_intQI_type_node,
	      VNx32QImode, VNx16QImode, TARGET_MIN_VLEN > 32)
/* LMUL = 8:
   Machine mode = VNx64QImode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx32QImode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE1 (vint8m8_t, 14, __rvv_int8m8_t, intQI_type_node, VNx64QImode,
	      VNx32QImode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE1 (vuint8m8_t, 15, __rvv_uint8m8_t, unsigned_intQI_type_node,
	      VNx64QImode, VNx32QImode, TARGET_MIN_VLEN > 32)

/* LMUL = 1/4:
   Only enble when TARGET_MIN_VLEN > 32 and machine mode = VNx1HImode.  */
ADJUST_TYPE0 (vint16mf4_t, 16, __rvv_int16mf4_t, intHI_type_node, NULL_TREE,
	      VNx1HImode, VOIDmode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE0 (vuint16mf4_t, 17, __rvv_uint16mf4_t, unsigned_intHI_type_node,
	      NULL_TREE, VNx1HImode, VOIDmode, TARGET_MIN_VLEN > 32)
/* LMUL = 1/2:
   Machine mode = VNx2HImode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx1HImode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE1 (vint16mf2_t, 16, __rvv_int16mf2_t, intHI_type_node, VNx2HImode,
	      VNx1HImode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE1 (vuint16mf2_t, 17, __rvv_uint16mf2_t, unsigned_intHI_type_node,
	      VNx2HImode, VNx1HImode, TARGET_MIN_VLEN > 32)
/* LMUL = 1:
   Machine mode = VNx4HImode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx2HImode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE1 (vint16m1_t, 15, __rvv_int16m1_t, intHI_type_node, VNx4HImode,
	      VNx2HImode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE1 (vuint16m1_t, 16, __rvv_uint16m1_t, unsigned_intHI_type_node,
	      VNx4HImode, VNx2HImode, TARGET_MIN_VLEN > 32)
/* LMUL = 2:
   Machine mode = VNx8HImode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx4HImode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE1 (vint16m2_t, 15, __rvv_int16m2_t, intHI_type_node, VNx8HImode,
	      VNx4HImode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE1 (vuint16m2_t, 16, __rvv_uint16m2_t, unsigned_intHI_type_node,
	      VNx8HImode, VNx4HImode, TARGET_MIN_VLEN > 32)
/* LMUL = 4:
   Machine mode = VNx16HImode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx8HImode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE1 (vint16m4_t, 15, __rvv_int16m4_t, intHI_type_node, VNx16HImode,
	      VNx8HImode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE1 (vuint16m4_t, 16, __rvv_uint16m4_t, unsigned_intHI_type_node,
	      VNx16HImode, VNx8HImode, TARGET_MIN_VLEN > 32)
/* LMUL = 8:
   Machine mode = VNx32HImode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx16HImode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE1 (vint16m8_t, 15, __rvv_int16m8_t, intHI_type_node, VNx32HImode,
	      VNx16HImode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE1 (vuint16m8_t, 16, __rvv_uint16m8_t, unsigned_intHI_type_node,
	      VNx32HImode, VNx16HImode, TARGET_MIN_VLEN > 32)

/* LMUL = 1/2:
   Only enble when TARGET_MIN_VLEN > 32 and machine mode = VNx1SImode.  */
ADJUST_TYPE0 (vint32mf2_t, 16, __rvv_int32mf2_t, int32_type_node, NULL_TREE,
	      VNx1SImode, VOIDmode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE0 (vuint32mf2_t, 17, __rvv_uint32mf2_t, unsigned_int32_type_node,
	      NULL_TREE, VNx1SImode, VOIDmode, TARGET_MIN_VLEN > 32)
/* LMUL = 1:
   Machine mode = VNx2SImode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx1SImode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE1 (vint32m1_t, 15, __rvv_int32m1_t, int32_type_node, VNx2SImode,
	      VNx1SImode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE1 (vuint32m1_t, 16, __rvv_uint32m1_t, unsigned_int32_type_node,
	      VNx2SImode, VNx1SImode, TARGET_MIN_VLEN > 32)
/* LMUL = 2:
   Machine mode = VNx4SImode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx2SImode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE1 (vint32m2_t, 15, __rvv_int32m2_t, int32_type_node, VNx4SImode,
	      VNx2SImode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE1 (vuint32m2_t, 16, __rvv_uint32m2_t, unsigned_int32_type_node,
	      VNx4SImode, VNx2SImode, TARGET_MIN_VLEN > 32)
/* LMUL = 4:
   Machine mode = VNx8SImode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx4SImode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE1 (vint32m4_t, 15, __rvv_int32m4_t, int32_type_node, VNx8SImode,
	      VNx4SImode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE1 (vuint32m4_t, 16, __rvv_uint32m4_t, unsigned_int32_type_node,
	      VNx8SImode, VNx4SImode, TARGET_MIN_VLEN > 32)
/* LMUL = 8:
   Machine mode = VNx16SImode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx8SImode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE1 (vint32m8_t, 15, __rvv_int32m8_t, int32_type_node, VNx16SImode,
	      VNx8SImode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE1 (vuint32m8_t, 16, __rvv_uint32m8_t, unsigned_int32_type_node,
	      VNx16SImode, VNx8SImode, TARGET_MIN_VLEN > 32)

/* SEW = 64:
   Disable when TARGET_MIN_VLEN > 32.  */
ADJUST_TYPE0 (vint64m1_t, 15, __rvv_int64m1_t, intDI_type_node, NULL_TREE,
	      VNx1DImode, VOIDmode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE0 (vuint64m1_t, 16, __rvv_uint64m1_t, unsigned_intDI_type_node,
	      NULL_TREE, VNx1DImode, VOIDmode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE0 (vint64m2_t, 15, __rvv_int64m2_t, intDI_type_node, NULL_TREE,
	      VNx2DImode, VOIDmode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE0 (vuint64m2_t, 16, __rvv_uint64m2_t, unsigned_intDI_type_node,
	      NULL_TREE, VNx2DImode, VOIDmode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE0 (vint64m4_t, 15, __rvv_int64m4_t, intDI_type_node, NULL_TREE,
	      VNx4DImode, VOIDmode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE0 (vuint64m4_t, 16, __rvv_uint64m4_t, unsigned_intDI_type_node,
	      NULL_TREE, VNx4DImode, VOIDmode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE0 (vint64m8_t, 15, __rvv_int64m8_t, intDI_type_node, NULL_TREE,
	      VNx8DImode, VOIDmode, TARGET_MIN_VLEN > 32)
ADJUST_TYPE0 (vuint64m8_t, 16, __rvv_uint64m8_t, unsigned_intDI_type_node,
	      NULL_TREE, VNx8DImode, VOIDmode, TARGET_MIN_VLEN > 32)

/* LMUL = 1/2:
   Only enble when TARGET_MIN_VLEN > 32 and machine mode = VNx1SFmode.  */
ADJUST_TYPE0 (vfloat32mf2_t, 18, __rvv_float32mf2_t, float_type_node, NULL_TREE,
	      VNx1SFmode, VOIDmode,
	      (TARGET_VECTOR_FP32 && (TARGET_MIN_VLEN > 32)))
/* LMUL = 1:
   Machine mode = VNx2SFmode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx1SFmode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE2 (vfloat32m1_t, 17, __rvv_float32m1_t, float_type_node, NULL_TREE,
	      VNx2SFmode, VNx1SFmode, TARGET_VECTOR_FP32, TARGET_MIN_VLEN > 32)
/* LMUL = 2:
   Machine mode = VNx4SFmode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx2SFmode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE2 (vfloat32m2_t, 17, __rvv_float32m2_t, float_type_node, NULL_TREE,
	      VNx4SFmode, VNx2SFmode, TARGET_VECTOR_FP32, TARGET_MIN_VLEN > 32)
/* LMUL = 4:
   Machine mode = VNx8SFmode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx4SFmode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE2 (vfloat32m4_t, 17, __rvv_float32m4_t, float_type_node, NULL_TREE,
	      VNx8SFmode, VNx4SFmode, TARGET_VECTOR_FP32, TARGET_MIN_VLEN > 32)
/* LMUL = 8:
   Machine mode = VNx16SFmode when TARGET_MIN_VLEN > 32.
   Machine mode = VNx8SFmode when TARGET_MIN_VLEN = 32.  */
ADJUST_TYPE2 (vfloat32m8_t, 17, __rvv_float32m8_t, float_type_node, NULL_TREE,
	      VNx16SFmode, VNx8SFmode, TARGET_VECTOR_FP32, TARGET_MIN_VLEN > 32)

/* SEW = 64:
   Disable when TARGET_VECTOR_FP64.  */
ADJUST_TYPE0 (vfloat64m1_t, 17, __rvv_float64m1_t, double_type_node, NULL_TREE,
	      VNx1DFmode, VOIDmode, TARGET_VECTOR_FP64)
ADJUST_TYPE0 (vfloat64m2_t, 17, __rvv_float64m2_t, double_type_node, NULL_TREE,
	      VNx2DFmode, VOIDmode, TARGET_VECTOR_FP64)
ADJUST_TYPE0 (vfloat64m4_t, 17, __rvv_float64m4_t, double_type_node, NULL_TREE,
	      VNx4DFmode, VOIDmode, TARGET_VECTOR_FP64)
ADJUST_TYPE0 (vfloat64m8_t, 17, __rvv_float64m8_t, double_type_node, NULL_TREE,
	      VNx8DFmode, VOIDmode, TARGET_VECTOR_FP64)

#undef TARGET_VECTOR_FP64
#undef TARGET_VECTOR_FP32
#undef ADJUST_TYPE1
#undef ADJUST_TYPE0
#undef DEF_RVV_TYPE